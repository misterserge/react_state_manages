import { useStore, useUnit } from 'effector-react'
import { 
  $count, 
  $users, 
  $loading, 
  $doubleCount,
  increment, 
  decrement, 
  reset,
  incrementAsyncFx,
  fetchUsersFx
} from './model'

const CounterDisplay = () => {
  const count = useStore($count)
  const doubleCount = useStore($doubleCount)
  
  return (
    <div>
      <div className="counter-display">{count}</div>
      <p style={{ textAlign: 'center', color: '#aaa' }}>
        –î–≤–æ–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {doubleCount}
      </p>
    </div>
  )
}

const CounterControls = () => {
  // useUnit - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è multiple stores/events
  const loading = useStore($loading)
  
  return (
    <div className="buttons">
      <button className="increment" onClick={increment} disabled={loading}>
        +1
      </button>
      <button className="decrement" onClick={decrement} disabled={loading}>
        -1
      </button>
      <button className="reset" onClick={reset} disabled={loading}>
        Reset
      </button>
      <button className="async-btn" onClick={() => incrementAsyncFx()} disabled={loading}>
        {loading ? 'Loading...' : 'Async +1'}
      </button>
    </div>
  )
}

const UsersList = () => {
  const users = useStore($users)
  const loading = useStore($loading)

  return (
    <div>
      <button className="async-btn" onClick={() => fetchUsersFx()} disabled={loading}>
        {loading ? 'Loading...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
      </button>
      
      {users.length > 0 && (
        <div className="user-list">
          {users.map(user => (
            <div key={user.id} className="user-item">
              <div className="user-info">
                <span className="user-name">{user.name}</span>
                <span className="user-email">{user.email}</span>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

const EffectorExample = () => {
  return (
    <div className="counter-container">
      <h2>Effector (–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)</h2>
      <CounterDisplay />
      <CounterControls />
      <UsersList />
      
      <div className="info-section">
        <h3>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h3>
        <ul>
          <li>‚úÖ –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º Store/Event/Effect</li>
          <li>‚úÖ TypeScript first - –æ—Ç–ª–∏—á–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∏–∑ –∫–æ—Ä–æ–±–∫–∏</li>
          <li>‚úÖ Effect –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π —Å pending/done/fail —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏</li>
          <li>‚úÖ Combine –∏ sample –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏</li>
          <li>‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ store —á–µ—Ä–µ–∑ <code>.map()</code></li>
          <li>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–æ–≤</li>
          <li>‚úÖ Framework agnostic (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å React, Vue, Svelte)</li>
          <li>‚úÖ –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä (~10kb)</li>
          <li>‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</li>
          <li>‚ö†Ô∏è –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è (Store, Event, Effect, Domain)</li>
          <li>‚ö†Ô∏è Steep learning curve –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤</li>
          <li>üì¶ –í—Å—è –ª–æ–≥–∏–∫–∞ –≤ <code>model.js</code> —Å events, stores, effects</li>
        </ul>
      </div>
    </div>
  )
}

export default EffectorExample

