import { Provider, useDispatch, useSelector } from 'react-redux'
import { store, increment, decrement, reset, incrementAsync, fetchUsers } from './store'

const CounterDisplay = () => {
  const count = useSelector((state) => state.counter.count)
  return <div className="counter-display">{count}</div>
}

const CounterControls = () => {
  const dispatch = useDispatch()
  const loading = useSelector((state) => state.users.loading)
  
  return (
    <div className="buttons">
      <button className="increment" onClick={() => dispatch(increment())} disabled={loading}>
        +1
      </button>
      <button className="decrement" onClick={() => dispatch(decrement())} disabled={loading}>
        -1
      </button>
      <button className="reset" onClick={() => dispatch(reset())} disabled={loading}>
        Reset
      </button>
      <button className="async-btn" onClick={() => dispatch(incrementAsync())} disabled={loading}>
        {loading ? 'Loading...' : 'Async +1'}
      </button>
    </div>
  )
}

const UsersList = () => {
  const dispatch = useDispatch()
  const users = useSelector((state) => state.users.users)
  const loading = useSelector((state) => state.users.loading)

  return (
    <div>
      <button className="async-btn" onClick={() => dispatch(fetchUsers())} disabled={loading}>
        {loading ? 'Loading...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
      </button>
      
      {users.length > 0 && (
        <div className="user-list">
          {users.map(user => (
            <div key={user.id} className="user-item">
              <div className="user-info">
                <span className="user-name">{user.name}</span>
                <span className="user-email">{user.email}</span>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

const RTKContent = () => {
  return (
    <div className="counter-container">
      <h2>Redux Toolkit (RTK)</h2>
      <CounterDisplay />
      <CounterControls />
      <UsersList />
      
      <div className="info-section">
        <h3>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h3>
        <ul>
          <li>‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Redux</li>
          <li>‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ boilerplate –∫–æ–¥–∞ —á–µ–º –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º Redux</li>
          <li>‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Immer –¥–ª—è –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</li>
          <li>‚úÖ createAsyncThunk –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –∫–æ—Ä–æ–±–∫–∏</li>
          <li>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è action creators</li>
          <li>‚úÖ DevTools –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</li>
          <li>‚úÖ TypeScript –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑ –∫–æ—Ä–æ–±–∫–∏</li>
          <li>‚ö†Ô∏è –í—Å–µ –µ—â–µ —Ç—Ä–µ–±—É–µ—Ç Provider –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</li>
          <li>üì¶ –õ–æ–≥–∏–∫–∞ –≤ <code>store.js</code> —Å–æ slices</li>
        </ul>
      </div>
    </div>
  )
}

const RTKExample = () => {
  return (
    <Provider store={store}>
      <RTKContent />
    </Provider>
  )
}

export default RTKExample

