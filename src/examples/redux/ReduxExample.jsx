import { Provider, useDispatch, useSelector } from 'react-redux'
import { store, increment, decrement, reset, incrementAsync, fetchUsers } from './store'

const CounterDisplay = () => {
  const count = useSelector((state) => state.counter.count)
  return <div className="counter-display">{count}</div>
}

const CounterControls = () => {
  const dispatch = useDispatch()
  const loading = useSelector((state) => state.users.loading)
  
  return (
    <div className="buttons">
      <button className="increment" onClick={() => dispatch(increment())} disabled={loading}>
        +1
      </button>
      <button className="decrement" onClick={() => dispatch(decrement())} disabled={loading}>
        -1
      </button>
      <button className="reset" onClick={() => dispatch(reset())} disabled={loading}>
        Reset
      </button>
      <button className="async-btn" onClick={() => dispatch(incrementAsync())} disabled={loading}>
        {loading ? 'Loading...' : 'Async +1'}
      </button>
    </div>
  )
}

const UsersList = () => {
  const dispatch = useDispatch()
  const users = useSelector((state) => state.users.users)
  const loading = useSelector((state) => state.users.loading)

  return (
    <div>
      <button className="async-btn" onClick={() => dispatch(fetchUsers())} disabled={loading}>
        {loading ? 'Loading...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
      </button>
      
      {users.length > 0 && (
        <div className="user-list">
          {users.map(user => (
            <div key={user.id} className="user-item">
              <div className="user-info">
                <span className="user-name">{user.name}</span>
                <span className="user-email">{user.email}</span>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

const ReduxContent = () => {
  return (
    <div className="counter-container">
      <h2>Redux (Classic)</h2>
      <CounterDisplay />
      <CounterControls />
      <UsersList />
      
      <div className="info-section">
        <h3>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h3>
        <ul>
          <li>‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–µ–º —Ä–µ—à–µ–Ω–∏–µ (—Å 2015 –≥–æ–¥–∞)</li>
          <li>‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º</li>
          <li>‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ DevTools –¥–ª—è –¥–µ–±–∞–≥–∞</li>
          <li>‚úÖ Middleware –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞</li>
          <li>‚ö†Ô∏è –ú–Ω–æ–≥–æ boilerplate –∫–æ–¥–∞ (actions, reducers, types)</li>
          <li>‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤ Provider</li>
          <li>‚ö†Ô∏è –°–ª–æ–∂–Ω–µ–µ –∏–∑—É—á–∏—Ç—å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤</li>
          <li>‚ö†Ô∏è –ù—É–∂–µ–Ω middleware (thunk/saga) –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π</li>
          <li>üì¶ –õ–æ–≥–∏–∫–∞ –≤ <code>store.js</code> —Å actions, reducers</li>
        </ul>
      </div>
    </div>
  )
}

const ReduxExample = () => {
  return (
    <Provider store={store}>
      <ReduxContent />
    </Provider>
  )
}

export default ReduxExample

