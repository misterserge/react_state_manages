import { useAtom, useAtomValue, useSetAtom } from 'jotai'
import { 
  countAtom, 
  usersAtom, 
  loadingAtom,
  incrementAtom,
  decrementAtom,
  resetAtom,
  incrementAsyncAtom,
  fetchUsersAtom,
  doubleCountAtom
} from './store'

const CounterDisplay = () => {
  const count = useAtomValue(countAtom)
  const doubleCount = useAtomValue(doubleCountAtom)
  
  return (
    <div>
      <div className="counter-display">{count}</div>
      <p style={{ textAlign: 'center', color: '#aaa' }}>
        –î–≤–æ–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {doubleCount}
      </p>
    </div>
  )
}

const CounterControls = () => {
  const increment = useSetAtom(incrementAtom)
  const decrement = useSetAtom(decrementAtom)
  const reset = useSetAtom(resetAtom)
  const incrementAsync = useSetAtom(incrementAsyncAtom)
  const loading = useAtomValue(loadingAtom)
  
  return (
    <div className="buttons">
      <button className="increment" onClick={increment} disabled={loading}>
        +1
      </button>
      <button className="decrement" onClick={decrement} disabled={loading}>
        -1
      </button>
      <button className="reset" onClick={reset} disabled={loading}>
        Reset
      </button>
      <button className="async-btn" onClick={incrementAsync} disabled={loading}>
        {loading ? 'Loading...' : 'Async +1'}
      </button>
    </div>
  )
}

const UsersList = () => {
  const users = useAtomValue(usersAtom)
  const loading = useAtomValue(loadingAtom)
  const fetchUsers = useSetAtom(fetchUsersAtom)

  return (
    <div>
      <button className="async-btn" onClick={fetchUsers} disabled={loading}>
        {loading ? 'Loading...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
      </button>
      
      {users.length > 0 && (
        <div className="user-list">
          {users.map(user => (
            <div key={user.id} className="user-item">
              <div className="user-info">
                <span className="user-name">{user.name}</span>
                <span className="user-email">{user.email}</span>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

const JotaiExample = () => {
  return (
    <div className="counter-container">
      <h2>Jotai (–ê—Ç–æ–º–∞—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥)</h2>
      <CounterDisplay />
      <CounterControls />
      <UsersList />
      
      <div className="info-section">
        <h3>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h3>
        <ul>
          <li>‚úÖ –ê—Ç–æ–º–∞—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∞—Ç–æ–º—ã</li>
          <li>‚úÖ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π API, –ø–æ—Ö–æ–∂ –Ω–∞ <code>useState</code></li>
          <li>‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç Provider –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤</li>
          <li>‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∞—Ç–æ–º—ã (computed values) –∏–∑ –∫–æ—Ä–æ–±–∫–∏</li>
          <li>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–æ–≤</li>
          <li>‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ async –∞—Ç–æ–º–æ–≤ –Ω–∞—Ç–∏–≤–Ω–æ</li>
          <li>‚úÖ –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä (~3kb)</li>
          <li>‚úÖ TypeScript first –ø–æ–¥—Ö–æ–¥</li>
          <li>‚úÖ Utilities: atomWithStorage, atomFamily –∏ –¥—Ä.</li>
          <li>‚ö†Ô∏è –ù–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞ –º—ã—à–ª–µ–Ω–∏—è (–∞—Ç–æ–º—ã –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ store)</li>
          <li>üì¶ –ê—Ç–æ–º—ã –≤ <code>store.js</code>, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ö—É–∫–∏</li>
        </ul>
      </div>
    </div>
  )
}

export default JotaiExample

